#!@PYTHON@

# lt.in
#
# Copyright 2023 Unknown
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: GPL-3.0-or-later

import os
import sys
import signal
import locale
import gettext


import gi

# gi.require_version("Adw", "1.4")
gi.require_version("Adw", "1")
gi.require_version('Gio', '2.0')
# gi.require_version('Gtk', '4.12')
gi.require_version('Gtk', '4.0')
gi.require_version('GIRepository', '2.0')
gi.require_version('Gst', '1.0')
from gi.repository import Adw, GIRepository, Gio, Gtk, Gst

Gst.init(None)
Adw.init()

LOCALE_DIR = '@localedir@'
PKGDATA_DIR = '@pkgdatadir@'
VERSION = '@version@'

print(LOCALE_DIR)

def set_exception_hook():
    """Configures sys.excepthook to enforce Gtk application exiting."""

    def new_hook(etype, evalue, etb):
        old_hook(etype, evalue, etb)
        while Gtk.main_level():
            Gtk.main_quit()
        sys.exit()

    old_hook = sys.excepthook
    sys.excepthook = new_hook

def set_internationalization():
    """Sets application internationalization."""
    try:
        locale.bindtextdomain('@application_id@', LOCALE_DIR)
        locale.textdomain('@application_id@')
    except AttributeError as e:
        # Python built without gettext support does not have
        # bindtextdomain() and textdomain().
        print(f"Could not bind the gettext translation domain. Some translations will not work. Error:\n{e}")

    gettext.bindtextdomain('@application_id@', LOCALE_DIR)
    gettext.textdomain('@application_id@')


def set_resources():
    """Sets application ressource file."""
    resource = Gio.resource_load(os.path.join(PKGDATA_DIR, '@rdnn_name@.gresource'))
    Gio.Resource._register(resource)  # nopep8


def run_application():
    """Runs GNOME Music application and returns its exit code."""
    from lt_gtk.main import LtApplication

    app = LtApplication('@application_id@', VERSION)
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    return app.run(sys.argv)


def main():
    """Sets environment and runs GNOME Music."""
    # set_exception_hook()
    set_internationalization()
    set_resources()
    return run_application()


if __name__ == '__main__':
    sys.exit(main())
